import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Input");
        String string = scanner.nextLine();
        String regexAr = "\\b([1-9]|10)([-+*/])(I|II|III|IV|V|VI|VII|VIII|IX|X)\\b";
        String regexRa = "\\b(I|II|III|IV|V|VI|VII|VIII|IX|X)([-+*/])([1-9]|10)\\b";
        Pattern patternAr = Pattern.compile(regexAr);
        Pattern patternRa = Pattern.compile(regexRa);
        Matcher mAr = patternAr.matcher(string);
        Matcher mRa = patternRa.matcher(string);
        boolean foundAr = mAr.find();
        boolean foundRa = mRa.find();
        if (foundAr || foundRa) {
            System.out.println("throws Exception //т.к. используются одновременно разные системы счисления");
        }
        String regexArt = "\\b([1-9]|10)([-+*/])(I|II|III|IV|V|VI|VII|VIII|IX|X)([-+*/])\\b";
        String regexRat = "\\b(I|II|III|IV|V|VI|VII|VIII|IX|X)([-+*/])([1-9]|10)([-+*/])\\b";
        String regexAt = "\\b([1-9]|10)([-+*/])([1-9]|10)([-+*/])\\b";
        String regexRt = "\\b(I|II|III|IV|V|VI|VII|VIII|IX|X)([-+*/])(I|II|III|IV|V|VI|VII|VIII|IX|X)([-+*/])\\b";
        Pattern patternArt = Pattern.compile(regexArt);
        Pattern patternRat = Pattern.compile(regexRat);
        Pattern patternAt = Pattern.compile(regexAt);
        Pattern patternRt = Pattern.compile(regexRt);
        Matcher mAt = patternAt.matcher(string);
        Matcher mRt = patternRt.matcher(string);
        Matcher mArt = patternArt.matcher(string);
        Matcher mRat = patternRat.matcher(string);
        boolean foundArt = mArt.find();
        boolean foundRat = mRat.find();
        boolean foundAt = mAt.find();
        boolean foundRt = mRt.find();
        if (foundArt || foundRat || foundAt || foundRt) {
            System.out.println("throws Exception //т.к. формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
        } else {
            String regexA = "\\b([1-9]|10)([-+*/])([1-9]|10)\\b";
            String regexR = "\\b(I|II|III|IV|V|VI|VII|VIII|IX|X)([-+*/])(I|II|III|IV|V|VI|VII|VIII|IX|X)\\b";
            Pattern patternA = Pattern.compile(regexA);
            Pattern patternR = Pattern.compile(regexR);
            Matcher mA = patternA.matcher(string);
            Matcher mR = patternR.matcher(string);
            boolean foundA = mA.find();
            boolean foundR = mR.find();
            Matcher m = foundA ? mA : foundR ? mR : null;
            if (foundA || foundR) {
                Integer first = getOperand(m.group(1));
                String opeR = m.group(2);
                Integer second = getOperand(m.group(3));
                Integer result = null;
                switch (opeR) {
                    case "+" -> result = first + second;
                    case "-" -> result = first - second;
                    case "*" -> result = first * second;
                    case "/" -> result = first / second;
                    default -> {
                    }
                }
                if (result != null) {
                    if (foundA) {
                        System.out.println("Результат: " + result);}
                    else {
                        System.out.println("Результат: " + convert(result));}
                }
            } else {
                System.out.println("throws Exception //т.к. строка не является математической операцией");
            }
        }
    }

    static Integer getOperand(String opStr) {
        int result;
        try {
            result = Integer.parseInt(opStr);
        } catch (NumberFormatException e) {
            result = switch (opStr) {
                case "I" -> 1;
                case "II" -> 2;
                case "III" -> 3;
                case "IV" -> 4;
                case "V" -> 5;
                case "VI" -> 6;
                case "VII" -> 7;
                case "VIII" -> 8;
                case "IX" -> 9;
                case "X" -> 10;
                default -> throw e;
            };
        }
        return result;
    }
    static String convert(int number) {
        if (number < 0) {
            System.out.println("throws Exception //т.к. в римской системе нет отрицательных чисел");
        }
        String romanOnes = romanDigit(number % 10, "I", "V", "X");
        number /= 10;
        String romanTens = romanDigit(number % 10, "X", "L", "C");
        number /= 10;
        String romanHundreds = romanDigit(number % 10, "C", "", "");
        return romanHundreds + romanTens + romanOnes;
    }
    static String romanDigit(int n, String one, String five, String ten) {
        if (n >= 1) {
            switch (n) {
                case 1:
                    return one;
                case 2:
                    return one + one;
                case 3:
                    return one + one + one;
                case 4:
                    return one + five;
                case 5:
                    return five;
                case 6:
                    return five + one;
                case 7:
                    return five + one + one;
                case 8:
                    return five + one + one + one;
                case 9:
                    return one + ten;
                default:
                    break;
            }
        }
        return "";
    }
}
